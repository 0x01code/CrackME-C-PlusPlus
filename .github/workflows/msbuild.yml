name: MSBuild

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Create output directory
      run: New-Item -ItemType Directory -Path C:\builtfiles\CrackME -Force > $null
      continue-on-error: true

    - name: Copy release files for upload
      run: Copy-Item -Path CrackME\bin\Release\* -Destination C:\builtfiles\CrackME\ -Recurse

    - uses: actions/upload-artifact@v3.1.1
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      with:
        name: CrackME
        path: C:\builtfiles\CrackME
        if-no-files-found: error

    - uses: actions/download-artifact@v3
      with:
        name: CrackME
        path: C:\builtfiles\CrackME

    - name: Archive Release
      uses: thedoctor0/zip-release@main
      with:
        type: "zip"
        filename: CrackME.zip
        path: C:\builtfiles\CrackME

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{  github.ref_name }}
        release_name: v${{  github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./CrackME.zip
        asset_name: CrackME.zip
        asset_content_type: application/zip
